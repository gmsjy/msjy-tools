1、字符串判断

str1 = str2　　　　　　当两个串有相同内容、长度时为真
str1 != str2　　　　　 当串str1和str2不等时为真
-n str1　　　　　　　 当串的长度大于0时为真(串非空)
-z str1　　　　　　　 当串的长度为0时为真(空串)
str1　　　　　　　　   当串str1为非空时为真

2、数字的判断

int1 -eq int2　　　　两数相等为真
int1 -ne int2　　　　两数不等为真
int1 -gt int2　　　　int1大于int2为真
int1 -ge int2　　　　int1大于等于int2为真
int1 -lt int2　　　　int1小于int2为真
int1 -le int2　　　　int1小于等于int2为真

3、文件的判断

-r file　　　　　用户可读为真
-w file　　　　　用户可写为真
-x file　　　　　用户可执行为真
-f file　　　　　文件为正规文件为真
-d file　　　　　文件为目录为真
-c file　　　　　文件为字符特殊文件为真
-b file　　　　　文件为块特殊文件为真
-s file　　　　　文件大小非0时为真
-t file　　　　　当文件描述符(默认为1)指定的设备为终端时为真

4、复杂逻辑判断

-a 　 　　　　　 与
-o　　　　　　　 或
!　　　　　　　　非

结尾

语法虽然简单，但是在SHELL里使用的时候，他的功能变得强大了。

================================================================

[ -a FILE ]  如果 FILE 存在则为真。 
[ -b FILE ]  如果 FILE 存在且是一个块特殊文件则为真。 
[ -c FILE ]  如果 FILE 存在且是一个字特殊文件则为真。 
[ -d FILE ]  如果 FILE 存在且是一个目录则为真。 
[ -e FILE ]  如果 FILE 存在则为真。 
[ -f FILE ]  如果 FILE 存在且是一个普通文件则为真。 
[ -g FILE ] 如果 FILE 存在且已经设置了SGID则为真。 [ -h FILE ]  如果 FILE 存在且是一个符号连接则为真。 
[ -k FILE ]  如果 FILE 存在且已经设置了粘制位则为真。 
[ -p FILE ]  如果 FILE 存在且是一个名字管道(F如果O)则为真。 
[ -r FILE ]  如果 FILE 存在且是可读的则为真。 
[ -s FILE ]  如果 FILE 存在且大小不为0则为真。 
[ -t FD ]  如果文件描述符 FD 打开且指向一个终端则为真。 
[ -u FILE ]  如果 FILE 存在且设置了SUID (set user ID)则为真。 
[ -w FILE ]  如果 FILE 如果 FILE 存在且是可写的则为真。 
[ -x FILE ]  如果 FILE 存在且是可执行的则为真。 
[ -O FILE ]  如果 FILE 存在且属有效用户ID则为真。 
[ -G FILE ]  如果 FILE 存在且属有效用户组则为真。 
[ -L FILE ]  如果 FILE 存在且是一个符号连接则为真。 
[ -N FILE ]  如果 FILE 存在 and has been mod如果ied since it was last read则为真。 
[ -S FILE ]  如果 FILE 存在且是一个套接字则为真。 
[ FILE1 -nt FILE2 ]  如果 FILE1 has been changed more recently than FILE2, or 如果 FILE1 exists and FILE2 does not则为真。 
[ FILE1 -ot FILE2 ]  如果 FILE1 比 FILE2 要老, 或者 FILE2 存在且 FILE1 不存在则为真。 
[ FILE1 -ef FILE2 ]  如果 FILE1 和 FILE2 指向相同的设备和节点号则为真。 
[ -o OPTIONNAME ]  如果 shell选项 “OPTIONNAME” 开启则为真。 
[ -z STRING ]  “STRING” 的长度为零则为真。 
[ -n STRING ] or [ STRING ]  “STRING” 的长度为非零 non-zero则为真。 
[ STRING1 == STRING2 ]  如果2个字符串相同。 “=” may be used instead of “==” for strict POSIX compliance则为真。 
[ STRING1 != STRING2 ]  如果字符串不相等则为真。
[ STRING1 < STRING2 ]  如果 “STRING1” sorts before “STRING2” lexicographically in the current locale则为真。 
[ STRING1 > STRING2 ]  如果 “STRING1” sorts after “STRING2” lexicographically in the current locale则为真。 
[ ARG1 OP ARG2 ] “OP” is one of -eq, -ne, -lt, -le, -gt or -ge. These arithmetic binary operators return true if “ARG1” is equal to, not equal to, less than, less than or equal to, greater than, or greater than or equal to “ARG2”, respectively. “ARG1” and “ARG2” are integers.

*    $0 ： ./test.sh,即命令本身，相当于c/c++中的argv[0]
*    $1 ： -f,第一个参数.
*    $2 ： config.conf
*    $3, $4 ... ：类推。
*    $#  参数的个数，不包括命令本身，上例中$#为4.
*    $@ ：参数本身的列表，也不包括命令本身，如上例为 -f config.conf -v --prefix=/home
*    $* ：和$@相同，但"$*" 和 "$@"(加引号)并不同，"$*"将所有的参数解释成一个字符串，而"$@"是一个参数数组。

## 字符串截取

${varible##*string} 从左向右截取最后一个string后的字符串
${varible#*string}从左向右截取第一个string后的字符串
${varible%%string*}从右向左截取最后一个string后的字符串
${varible%string*}从右向左截取第一个string后的字符串
“*”只是一个通配符可以不要

${varible:n1:n2}:截取变量varible从n1到n2之间的字符串

## 参数个数测试

if [[ $# -ne 2 ]]; then
    echo "USAGE: $basename 201606 20160601"
    exit 1
fi

## 清空,备份文件

function empty_bacup_file ()

{

    for file in "$@"
    do
        cat ${file} |gzip --best -c > ${file}-$(date +%Y-%m-%d).gz && echo "" > ${file}
    done

}

## 测试目录是否存在

while :
do
    #echo "please input file's name:"
    #read a
    if [ -d ${path} ]
    then
         echo "the file is existing Please input new file name:"
    else
        mkdir $a
        echo "you aye sussesful!"
        break
    fi
done